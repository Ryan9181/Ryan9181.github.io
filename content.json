{"meta":{"title":"Ryan's Blog","subtitle":null,"description":null,"author":"Rayn luo","url":"http://blog.nfox.ml"},"pages":[],"posts":[{"title":"Javascript Xor decrypt","slug":"Javascript-Xor-decrypt","date":"2017-11-01T15:32:32.000Z","updated":"2017-11-01T19:21:33.000Z","comments":true,"path":"2017/11/01/Javascript-Xor-decrypt/","link":"","permalink":"http://blog.nfox.ml/2017/11/01/Javascript-Xor-decrypt/","excerpt":"","text":"Coco2dx-html 代码解密, 找到 IDA Pro 打开.so文件ScriptCore::ComipleScript函数,找到加载JS代码部分和XOR的KEY 分析后为简单的XOR加密 too simple so easy, 妈妈咪呀。 123456789101112131415161718192021222324252627var fs = require('fs');if (process.argv.length &lt; 3) &#123; console.log('Usage: ' + process.argv[0] + ' &lt;path&gt;\\n'); process.exit();&#125;fs.readFile(process.argv[2], function(err, data) &#123; if (err) &#123; console.error(err); return; &#125; var buf = new Buffer(data.length); const strMagic = '[encrypted]'; const strXOR = 'g465hjhbf4tydfyu5GJHG457DjgjkfUGJ214KBLJKLNgu84yftFYG1238JHfytdr4HFGH'; if (strMagic == data.slice(0, strMagic.length)) &#123; // just xor encrypted javascript file for (let i=0; i&lt;data.length - strMagic.length; i++) buf[i] = data[ i + strMagic.length ] ^ strXOR.charCodeAt(i % strXOR.length); console.log(buf.toString()); &#125; else &#123; console.log(data.toString()); &#125;&#125;); 去掉js的空行, 因为由于特殊字符的存在，空行并不是真的空行（^$）[[:space:]]表示空格或者tab的集合,[[:space:]]后面跟着一个，表示匹配0个或多个。[[:space:]]可以用/s表示sed /^/s$/d1find . -name \"*.js\" -exec sh -c \"node ~/Jobs/stuff/decrypt.js &#123;&#125;|sed /^[[:space:]]*$/d &gt; &#123;&#125;.txt\" \\; 删除加密文件1find . -name \"*.js\" -exec rm &#123;&#125;\" \\; 批量把文件名修改回原始.js文件名称1find . -name \"*.js\" -exec bash -c \"echo &#123;&#125; | cut -d . -f 1-3 |xargs mv &#123;&#125;\" \\; 试试Markdown流程图功能12345678st=&gt;start: 开始e=&gt;endop=&gt;operation: 开始作业cond=&gt;condition: 作业是否完成?st-&gt;op-&gt;condcond(是)-&gt;econd(否)-&gt;op","categories":[],"tags":[]},{"title":"find exec command 重定向","slug":"find-exec-command-重定向","date":"2017-11-01T15:03:56.000Z","updated":"2017-11-01T15:40:58.000Z","comments":true,"path":"2017/11/01/find-exec-command-重定向/","link":"","permalink":"http://blog.nfox.ml/2017/11/01/find-exec-command-重定向/","excerpt":"","text":"Windows在windows可以使用 For /R 递归遍历制定目录的文件,然后进行相应的处理,也可以把标准输出的内容重定向到文件中如: 1For %1 in (*.js) Do echo %1 %~n1 &gt; result.log 关于For的具体使用可以查阅For Command的帮助 MacOSX我们可以使用 Find -name -exec 来实现和Windows中的For 类似的功能 1Find . -name \"*.js\" -exec cat &#123;&#125; \\; 但是上面要把结果重定向到文件中 写法如下:1find . -name \"*.js\" -exec cat &#123;&#125; &gt; &#123;&#125;.log \\; 这种写法是错误的 因为bash把 &gt; 理解为find 命令的重定向，在修改一下12find . -name \"*.js\" -exec cat &#123;&#125; \\&gt; &#123;&#125;.log \\;# bash 理解成 cat 重定向到名为 ‘&gt;'的文件 打开万能的Google 输入 find -exec redirect http://www.loisch.de/linux.html提供的解决方案: 把 -exec 的命令让shell来执行1find . -name \"*.js\" -exec bash -c \"cat &#123;&#125; &gt; &#123;&#125;.log\" \\; Well Done.","categories":[],"tags":[]},{"title":"Gigi For Love","slug":"Gigi for Love","date":"2017-09-23T17:10:13.000Z","updated":"2017-09-23T08:36:22.000Z","comments":true,"path":"2017/09/24/Gigi for Love/","link":"","permalink":"http://blog.nfox.ml/2017/09/24/Gigi for Love/","excerpt":"","text":"第一个标题第一个子标题第二个标题第二个子标题","categories":[],"tags":[]},{"title":"每天8公里","slug":"每天8公里的减肥路程","date":"2017-09-22T17:10:13.000Z","updated":"2017-09-22T18:14:08.000Z","comments":true,"path":"2017/09/23/每天8公里的减肥路程/","link":"","permalink":"http://blog.nfox.ml/2017/09/23/每天8公里的减肥路程/","excerpt":"","text":"从9月初开始，制定了每天8公里的减肥计划… 开始是非常难熬的. 1print(\"hello world\") 123456#include &lt;stdio.h&gt;int main(int argc, char *argv[]) &#123; printf(\"this is a demo!\"); return 0;&#125; 目标 百度地图 高德地图","categories":[],"tags":[]},{"title":"我的博客序言","slug":"我的博客序言","date":"2017-09-22T17:04:13.000Z","updated":"2017-09-22T17:05:35.000Z","comments":true,"path":"2017/09/23/我的博客序言/","link":"","permalink":"http://blog.nfox.ml/2017/09/23/我的博客序言/","excerpt":"","text":"你好，欢迎来到我的个人博客,希望我们可以在这里遇见。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-09-22T16:55:06.000Z","updated":"2017-09-22T16:55:06.000Z","comments":true,"path":"2017/09/23/hello-world/","link":"","permalink":"http://blog.nfox.ml/2017/09/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}